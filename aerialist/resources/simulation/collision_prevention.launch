<launch>
    <arg name="world_file_name"    default="simple_obstacle" />
    <arg name="world_path" default="$(find avoidance)/sim/worlds/$(arg world_file_name).world" />
    <arg name="pointcloud_topics" default="[/camera/depth/points]"/>
    <arg name="gui" default="true"/>
    <arg name="rviz" default="true"/>
    
    <arg name="obst" default = "false"/>
    <arg name="obst_x" default = "0"/>
    <arg name="obst_y" default = "0"/>
    <arg name="obst_z" default = "0"/>
    <arg name="obst_yaw" default = "0"/>
    <arg name="obst_l" default = "1"/>
    <arg name="obst_w" default = "1"/>
    <arg name="obst_h" default = "1"/>
        
        
    <arg name="obst2" default = "false"/>
    <arg name="obst2_x" default = "0"/>
    <arg name="obst2_y" default = "0"/>
    <arg name="obst2_z" default = "0"/>
    <arg name="obst2_yaw" default = "0"/>
    <arg name="obst2_l" default = "1"/>
    <arg name="obst2_w" default = "1"/>
    <arg name="obst2_h" default = "1"/>

    <arg name="pattern" default="false"/>
    <arg name="pattern_design" default=""/>

    <arg name="pattern2" default="false"/>
    <arg name="pattern_design2" default=""/>
    
    <arg name="ns" default="/"/>
    <arg name="model" default="iris_depth_camera"/>
    <arg name="fcu_url" default="udp://:14540@localhost:14557"/>
    <arg name="gcs_url" default="" />   <!-- GCS link is provided by SITL -->
    <arg name="tgt_system" default="1" />
    <arg name="tgt_component" default="1" />
    <arg name="vehicle" default="iris_obs_avoid"/>

    <param name="use_sim_time" value="true" />


    <!-- Launch PX4 and mavros -->
        <!-- Launch rqt_reconfigure -->
    <!-- <node pkg="rqt_reconfigure" type="rqt_reconfigure" output="screen" name="rqt_reconfigure" /> -->

    <!-- Launch PX4 SITL -->
    <include file="$(find px4)/launch/px4.launch">
        <arg name="vehicle" value="$(arg vehicle)"/>
    </include>

    <!-- Define a static transform from a camera internal frame to the fcu for every camera used -->
    <node pkg="tf" type="static_transform_publisher" name="tf_depth_camera"
          args="0 0 0 -1.57 0 -1.57 fcu camera_link 10"/>

    <!-- Launch stereo_image_proc node which runs OpenCV's block matching  -->
    <node ns="stereo" pkg="stereo_image_proc" type="stereo_image_proc" name="stereo_image_proc">
        <param name="stereo_algorithm" type="double" value="1.0" />
        <param name="correlation_window_size" type="double" value="19.0" />
        <param name="disparity_range" type="double" value="32.0" />
        <param name="uniqueness_ratio" type="double" value="40.0" />
        <param name="speckle_size" type="double" value="1000.0" />
        <param name="speckle_range" type="double" value="2.0" />
    </node>
    <!-- Launch MavROS -->
    <group ns="$(arg ns)">
        <include file="$(find mavros)/launch/node.launch">
            <arg name="pluginlists_yaml" value="$(find mavros)/launch/px4_pluginlists.yaml" />
            <!-- Need to change the config file to get the tf topic and get local position in terms of local origin -->
            <arg name="config_yaml" value="$(find avoidance)/resource/px4_config.yaml" />
            <arg name="fcu_url" value="$(arg fcu_url)" />
            <arg name="gcs_url" value="$(arg gcs_url)" />
            <arg name="tgt_system" value="$(arg tgt_system)" />
            <arg name="tgt_component" value="$(arg tgt_component)" />
        </include>
    </group>

    <!-- Launch Gazebo -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="gui" value="$(arg gui)"/>
        <arg name="world_name" value="$(arg world_path)" />
    </include>

    <!-- Spawn vehicle model -->
    <node name="spawn_model" pkg="gazebo_ros" type="spawn_model" output="screen"
          args="-sdf -database $(arg model) -model $(arg vehicle)">
    </node>

    <!-- add obstacles -->
    <group if="$(arg obst)">
        <!-- Convert xacro and put on parameter server -->
        <param name="box_description" command="$(find xacro)/xacro.py aerialist/resources/simulation/box.xacro name:=box l:=$(arg obst_l) w:=$(arg obst_w) h:=$(arg obst_h) pattern:=$(arg pattern_design)" />

        <node name="spawn_obstacle" pkg="gazebo_ros" type="spawn_model" output="screen"
            args="-param box_description -urdf -x $(arg obst_x) -y $(arg obst_y) -z $(arg obst_z) -Y $(arg obst_yaw) -model box/">
        </node>

    </group>
    <group if="$(arg obst2)">
        <param name="box_description2" command="$(find xacro)/xacro.py aerialist/resources/simulation/box.xacro name:=box2 l:=$(arg obst2_l) w:=$(arg obst2_w) h:=$(arg obst2_h) pattern:=$(arg pattern_design2)" />

        <node name="spawn_obstacle2" pkg="gazebo_ros" type="spawn_model" output="screen"
            args="-param box_description2 -urdf -x $(arg obst2_x) -y $(arg obst2_y) -z $(arg obst2_z) -Y $(arg obst2_yaw) -model box2/">
        </node>
    </group>

    <!--<group if="$(arg obst2)">
        <param name="box_description2" command="$(find xacro)/xacro.py aerialist/resources/simulation/cylinder.xacro name:=cylinder l:=$(arg obst2_l) r:=$(arg obst2_w)" />

        <node name="spawn_obstacle2" pkg="gazebo_ros" type="spawn_model" output="screen"
            args="-param box_description2 -urdf -x $(arg obst2_x) -y $(arg obst2_y) -z $(arg obst2_z) -Y $(arg obst2_yaw) -model cylinder/">
        </node>
    </group>-->
    <!-- Load custom console configuration -->
    <env name="ROSCONSOLE_CONFIG_FILE" value="$(find local_planner)/resource/custom_rosconsole.conf"/>

    <!-- Launch local planner -->
    <arg name="manager"             default="local_planner_manager"/>

    <node pkg="nodelet" type="nodelet" name="$(arg manager)" args="manager" output="screen"/>
    <node pkg="nodelet" type="nodelet" name="local_planner_nodelet" args="load LocalPlannerNodelet $(arg manager)" output="screen">
      <param name="world_name" value="resources/simulation/$(arg world_file_name).yaml" />
      <rosparam param="pointcloud_topics" subst_value="True">$(arg pointcloud_topics)</rosparam>
    </node>

    <!-- Launch Rviz -->
    <group if="$(arg rviz)">
      <node name="rviz" pkg="rviz" type="rviz" output="screen" args="-d $(find local_planner)/resource/local_planner.rviz" />
    </group>
    
</launch>
